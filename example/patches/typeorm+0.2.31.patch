diff --git a/node_modules/typeorm/browser/driver/react-native/ReactNativeDriver.js b/node_modules/typeorm/browser/driver/react-native/ReactNativeDriver.js
index c2e7890..4356fdf 100644
--- a/node_modules/typeorm/browser/driver/react-native/ReactNativeDriver.js
+++ b/node_modules/typeorm/browser/driver/react-native/ReactNativeDriver.js
@@ -1,90 +1,105 @@
-import { __awaiter, __extends, __generator } from "tslib";
-import { AbstractSqliteDriver } from "../sqlite-abstract/AbstractSqliteDriver";
-import { ReactNativeQueryRunner } from "./ReactNativeQueryRunner";
-import { DriverOptionNotSetError } from "../../error/DriverOptionNotSetError";
-import { DriverPackageNotInstalledError } from "../../error/DriverPackageNotInstalledError";
+import { __awaiter, __extends, __generator } from 'tslib';
+import { AbstractSqliteDriver } from '../sqlite-abstract/AbstractSqliteDriver';
+import { ReactNativeQueryRunner } from './ReactNativeQueryRunner';
+import { DriverOptionNotSetError } from '../../error/DriverOptionNotSetError';
+import { DriverPackageNotInstalledError } from '../../error/DriverPackageNotInstalledError';
 var ReactNativeDriver = /** @class */ (function (_super) {
-    __extends(ReactNativeDriver, _super);
-    // -------------------------------------------------------------------------
-    // Constructor
-    // -------------------------------------------------------------------------
-    function ReactNativeDriver(connection) {
-        var _this = _super.call(this, connection) || this;
-        _this.database = _this.options.database;
-        // validate options to make sure everything is set
-        if (!_this.options.database)
-            throw new DriverOptionNotSetError("database");
-        if (!_this.options.location)
-            throw new DriverOptionNotSetError("location");
-        // load sqlite package
-        _this.loadDependencies();
-        return _this;
-    }
-    // -------------------------------------------------------------------------
-    // Public Methods
-    // -------------------------------------------------------------------------
-    /**
-     * Closes connection with database.
-     */
-    ReactNativeDriver.prototype.disconnect = function () {
-        return __awaiter(this, void 0, void 0, function () {
-            var _this = this;
-            return __generator(this, function (_a) {
-                return [2 /*return*/, new Promise(function (ok, fail) {
-                        _this.queryRunner = undefined;
-                        _this.databaseConnection.close(ok, fail);
-                    })];
-            });
-        });
-    };
-    /**
-     * Creates a query runner used to execute database queries.
-     */
-    ReactNativeDriver.prototype.createQueryRunner = function (mode) {
-        if (!this.queryRunner)
-            this.queryRunner = new ReactNativeQueryRunner(this);
-        return this.queryRunner;
-    };
-    // -------------------------------------------------------------------------
-    // Protected Methods
-    // -------------------------------------------------------------------------
-    /**
-     * Creates connection with the database.
-     */
-    ReactNativeDriver.prototype.createDatabaseConnection = function () {
-        var _this = this;
-        return new Promise(function (ok, fail) {
-            var options = Object.assign({}, {
-                name: _this.options.database,
-                location: _this.options.location,
-            }, _this.options.extra || {});
-            _this.sqlite.openDatabase(options, function (db) {
-                var databaseConnection = db;
-                // we need to enable foreign keys in sqlite to make sure all foreign key related features
-                // working properly. this also makes onDelete work with sqlite.
-                databaseConnection.executeSql("PRAGMA foreign_keys = ON;", [], function (result) {
-                    ok(databaseConnection);
-                }, function (error) {
-                    fail(error);
-                });
-            }, function (error) {
-                fail(error);
-            });
-        });
-    };
-    /**
-     * If driver dependency is not given explicitly, then try to load it via "require".
-     */
-    ReactNativeDriver.prototype.loadDependencies = function () {
-        try {
-            this.sqlite = require("react-native-sqlite-storage");
-        }
-        catch (e) {
-            throw new DriverPackageNotInstalledError("React-Native", "react-native-sqlite-storage");
+  __extends(ReactNativeDriver, _super);
+  // -------------------------------------------------------------------------
+  // Constructor
+  // -------------------------------------------------------------------------
+  function ReactNativeDriver(connection) {
+    var _this = _super.call(this, connection) || this;
+    _this.database = _this.options.database;
+    // validate options to make sure everything is set
+    if (!_this.options.database) throw new DriverOptionNotSetError('database');
+    if (!_this.options.location) throw new DriverOptionNotSetError('location');
+    // load sqlite package
+    _this.loadDependencies();
+    return _this;
+  }
+  // -------------------------------------------------------------------------
+  // Public Methods
+  // -------------------------------------------------------------------------
+  /**
+   * Closes connection with database.
+   */
+  ReactNativeDriver.prototype.disconnect = function () {
+    return __awaiter(this, void 0, void 0, function () {
+      var _this = this;
+      return __generator(this, function (_a) {
+        return [
+          2 /*return*/,
+          new Promise(function (ok, fail) {
+            _this.queryRunner = undefined;
+            _this.databaseConnection.close(ok, fail);
+          }),
+        ];
+      });
+    });
+  };
+  /**
+   * Creates a query runner used to execute database queries.
+   */
+  ReactNativeDriver.prototype.createQueryRunner = function (mode) {
+    if (!this.queryRunner) this.queryRunner = new ReactNativeQueryRunner(this);
+    return this.queryRunner;
+  };
+  // -------------------------------------------------------------------------
+  // Protected Methods
+  // -------------------------------------------------------------------------
+  /**
+   * Creates connection with the database.
+   */
+  ReactNativeDriver.prototype.createDatabaseConnection = function () {
+    var _this = this;
+    return new Promise(function (ok, fail) {
+      var options = Object.assign(
+        {},
+        {
+          name: _this.options.database,
+          location: _this.options.location,
+        },
+        _this.options.extra || {}
+      );
+      _this.sqlite.openDatabase(
+        options,
+        function (db) {
+          var databaseConnection = db;
+          // we need to enable foreign keys in sqlite to make sure all foreign key related features
+          // working properly. this also makes onDelete work with sqlite.
+          databaseConnection.executeSql(
+            'PRAGMA foreign_keys = ON;',
+            [],
+            function (result) {
+              ok(databaseConnection);
+            },
+            function (error) {
+              fail(error);
+            }
+          );
+        },
+        function (error) {
+          fail(error);
         }
-    };
-    return ReactNativeDriver;
-}(AbstractSqliteDriver));
+      );
+    });
+  };
+  /**
+   * If driver dependency is not given explicitly, then try to load it via "require".
+   */
+  ReactNativeDriver.prototype.loadDependencies = function () {
+    try {
+      this.sqlite = require('react-native-quick-sqlite');
+    } catch (e) {
+      throw new DriverPackageNotInstalledError(
+        'React-Native',
+        'react-native-quick-sqlite'
+      );
+    }
+  };
+  return ReactNativeDriver;
+})(AbstractSqliteDriver);
 export { ReactNativeDriver };
 
 //# sourceMappingURL=ReactNativeDriver.js.map
diff --git a/node_modules/typeorm/browser/driver/react-native/ReactNativeQueryRunner.js b/node_modules/typeorm/browser/driver/react-native/ReactNativeQueryRunner.js
index 040e637..45a0f7a 100644
--- a/node_modules/typeorm/browser/driver/react-native/ReactNativeQueryRunner.js
+++ b/node_modules/typeorm/browser/driver/react-native/ReactNativeQueryRunner.js
@@ -1,79 +1,106 @@
-import { __awaiter, __extends, __generator } from "tslib";
-import { QueryRunnerAlreadyReleasedError } from "../../error/QueryRunnerAlreadyReleasedError";
-import { QueryFailedError } from "../../error/QueryFailedError";
-import { AbstractSqliteQueryRunner } from "../sqlite-abstract/AbstractSqliteQueryRunner";
-import { Broadcaster } from "../../subscriber/Broadcaster";
+import { __awaiter, __extends, __generator } from 'tslib';
+import { QueryRunnerAlreadyReleasedError } from '../../error/QueryRunnerAlreadyReleasedError';
+import { QueryFailedError } from '../../error/QueryFailedError';
+import { AbstractSqliteQueryRunner } from '../sqlite-abstract/AbstractSqliteQueryRunner';
+import { Broadcaster } from '../../subscriber/Broadcaster';
 /**
  * Runs queries on a single sqlite database connection.
  */
 var ReactNativeQueryRunner = /** @class */ (function (_super) {
-    __extends(ReactNativeQueryRunner, _super);
-    // -------------------------------------------------------------------------
-    // Constructor
-    // -------------------------------------------------------------------------
-    function ReactNativeQueryRunner(driver) {
-        var _this = _super.call(this) || this;
-        _this.driver = driver;
-        _this.connection = driver.connection;
-        _this.broadcaster = new Broadcaster(_this);
-        return _this;
-    }
-    /**
-     * Executes a given SQL query.
-     */
-    ReactNativeQueryRunner.prototype.query = function (query, parameters) {
+  __extends(ReactNativeQueryRunner, _super);
+  // -------------------------------------------------------------------------
+  // Constructor
+  // -------------------------------------------------------------------------
+  function ReactNativeQueryRunner(driver) {
+    var _this = _super.call(this) || this;
+    _this.driver = driver;
+    _this.connection = driver.connection;
+    _this.broadcaster = new Broadcaster(_this);
+    return _this;
+  }
+  /**
+   * Executes a given SQL query.
+   */
+  ReactNativeQueryRunner.prototype.query = function (query, parameters) {
+    var _this = this;
+    if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();
+    return new Promise(function (ok, fail) {
+      return __awaiter(_this, void 0, void 0, function () {
+        var databaseConnection, queryStartTime;
         var _this = this;
-        if (this.isReleased)
-            throw new QueryRunnerAlreadyReleasedError();
-        return new Promise(function (ok, fail) { return __awaiter(_this, void 0, void 0, function () {
-            var databaseConnection, queryStartTime;
-            var _this = this;
-            return __generator(this, function (_a) {
-                switch (_a.label) {
-                    case 0: return [4 /*yield*/, this.connect()];
-                    case 1:
-                        databaseConnection = _a.sent();
-                        this.driver.connection.logger.logQuery(query, parameters, this);
-                        queryStartTime = +new Date();
-                        databaseConnection.executeSql(query, parameters, function (result) {
-                            // log slow queries if maxQueryExecution time is set
-                            var maxQueryExecutionTime = _this.driver.connection.options.maxQueryExecutionTime;
-                            var queryEndTime = +new Date();
-                            var queryExecutionTime = queryEndTime - queryStartTime;
-                            if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)
-                                _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);
-                            // return id of inserted row, if query was insert statement.
-                            if (query.substr(0, 11) === "INSERT INTO") {
-                                ok(result.insertId);
-                            }
-                            else {
-                                var resultSet = [];
-                                for (var i = 0; i < result.rows.length; i++) {
-                                    resultSet.push(result.rows.item(i));
-                                }
-                                ok(resultSet);
-                            }
-                        }, function (err) {
-                            _this.driver.connection.logger.logQueryError(err, query, parameters, _this);
-                            fail(new QueryFailedError(query, parameters, err));
-                        });
-                        return [2 /*return*/];
+        return __generator(this, function (_a) {
+          switch (_a.label) {
+            case 0:
+              return [4 /*yield*/, this.connect()];
+            case 1:
+              databaseConnection = _a.sent();
+              this.driver.connection.logger.logQuery(query, parameters, this);
+              queryStartTime = +new Date();
+              databaseConnection.executeSql(
+                query,
+                parameters,
+                function (result) {
+                  // log slow queries if maxQueryExecution time is set
+                  var maxQueryExecutionTime =
+                    _this.driver.connection.options.maxQueryExecutionTime;
+                  var queryEndTime = +new Date();
+                  var queryExecutionTime = queryEndTime - queryStartTime;
+                  if (
+                    maxQueryExecutionTime &&
+                    queryExecutionTime > maxQueryExecutionTime
+                  )
+                    _this.driver.connection.logger.logQuerySlow(
+                      queryExecutionTime,
+                      query,
+                      parameters,
+                      _this
+                    );
+                  // return id of inserted row, if query was insert statement.
+                  if (query.substr(0, 11) === 'INSERT INTO') {
+                    ok(result.insertId);
+                  } else {
+                    var resultSet = [];
+                    for (var i = 0; i < result.rows.length; i++) {
+                      resultSet.push(result.rows[i]);
+                    }
+                    ok(resultSet);
+                  }
+                },
+                function (err) {
+                  _this.driver.connection.logger.logQueryError(
+                    err,
+                    query,
+                    parameters,
+                    _this
+                  );
+                  fail(new QueryFailedError(query, parameters, err));
                 }
-            });
-        }); });
-    };
-    // -------------------------------------------------------------------------
-    // Protected Methods
-    // -------------------------------------------------------------------------
-    /**
-     * Parametrizes given object of values. Used to create column=value queries.
-     */
-    ReactNativeQueryRunner.prototype.parametrize = function (objectLiteral, startIndex) {
-        if (startIndex === void 0) { startIndex = 0; }
-        return Object.keys(objectLiteral).map(function (key, index) { return "\"" + key + "\"" + "=?"; });
-    };
-    return ReactNativeQueryRunner;
-}(AbstractSqliteQueryRunner));
+              );
+              return [2 /*return*/];
+          }
+        });
+      });
+    });
+  };
+  // -------------------------------------------------------------------------
+  // Protected Methods
+  // -------------------------------------------------------------------------
+  /**
+   * Parametrizes given object of values. Used to create column=value queries.
+   */
+  ReactNativeQueryRunner.prototype.parametrize = function (
+    objectLiteral,
+    startIndex
+  ) {
+    if (startIndex === void 0) {
+      startIndex = 0;
+    }
+    return Object.keys(objectLiteral).map(function (key, index) {
+      return '"' + key + '"' + '=?';
+    });
+  };
+  return ReactNativeQueryRunner;
+})(AbstractSqliteQueryRunner);
 export { ReactNativeQueryRunner };
 
 //# sourceMappingURL=ReactNativeQueryRunner.js.map
diff --git a/node_modules/typeorm/browser/platform/PlatformTools.js b/node_modules/typeorm/browser/platform/PlatformTools.js
index 069299f..04012ea 100644
--- a/node_modules/typeorm/browser/platform/PlatformTools.js
+++ b/node_modules/typeorm/browser/platform/PlatformTools.js
@@ -1,214 +1,214 @@
-import { __awaiter, __generator } from "tslib";
-import * as path from "path";
-import * as fs from "fs";
-import dotenv from "dotenv";
-import chalk from "chalk";
-import { highlight } from "cli-highlight";
-export { ReadStream } from "fs";
-export { EventEmitter } from "events";
-export { Readable, Writable } from "stream";
+import { __awaiter, __generator } from 'tslib';
+import * as path from 'path';
+import * as fs from 'fs';
+import dotenv from 'dotenv';
+import chalk from 'chalk';
+import { highlight } from 'cli-highlight';
+export { ReadStream } from 'fs';
+export { EventEmitter } from 'events';
+export { Readable, Writable } from 'stream';
 /**
  * Platform-specific tools.
  */
 var PlatformTools = /** @class */ (function () {
-    function PlatformTools() {
+  function PlatformTools() {}
+  /**
+   * Gets global variable where global stuff can be stored.
+   */
+  PlatformTools.getGlobalVariable = function () {
+    return global;
+  };
+  /**
+   * Loads ("require"-s) given file or package.
+   * This operation only supports on node platform
+   */
+  PlatformTools.load = function (name) {
+    // if name is not absolute or relative, then try to load package from the node_modules of the directory we are currently in
+    // this is useful when we are using typeorm package globally installed and it accesses drivers
+    // that are not installed globally
+    try {
+      // switch case to explicit require statements for webpack compatibility.
+      switch (name) {
+        /**
+         * mongodb
+         */
+        case 'mongodb':
+          return require('mongodb');
+        /**
+         * hana
+         */
+        case '@sap/hana-client':
+          return require('@sap/hana-client');
+        case 'hdb-pool':
+          return require('hdb-pool');
+        /**
+         * mysql
+         */
+        case 'mysql':
+          return require('mysql');
+        case 'mysql2':
+          return require('mysql2');
+        /**
+         * oracle
+         */
+        case 'oracledb':
+          return require('oracledb');
+        /**
+         * postgres
+         */
+        case 'pg':
+          return require('pg');
+        case 'pg-native':
+          return require('pg-native');
+        case 'pg-query-stream':
+          return require('pg-query-stream');
+        case 'typeorm-aurora-data-api-driver':
+          return require('typeorm-aurora-data-api-driver');
+        /**
+         * redis
+         */
+        case 'redis':
+          return require('redis');
+        case 'ioredis':
+          return require('ioredis');
+        /**
+         * better-sqlite3
+         */
+        case 'better-sqlite3':
+          return require('better-sqlite3');
+        /**
+         * sqlite
+         */
+        case 'sqlite3':
+          return require('sqlite3');
+        /**
+         * sql.js
+         */
+        case 'sql.js':
+          return require('sql.js');
+        /**
+         * sqlserver
+         */
+        case 'mssql':
+          return require('mssql');
+        /**
+         * react-native-sqlite
+         */
+        case 'react-native-quick-sqlite':
+          return require('react-native-quick-sqlite');
+      }
+    } catch (err) {
+      return require(path.resolve(process.cwd() + '/node_modules/' + name));
     }
-    /**
-     * Gets global variable where global stuff can be stored.
-     */
-    PlatformTools.getGlobalVariable = function () {
-        return global;
-    };
-    /**
-     * Loads ("require"-s) given file or package.
-     * This operation only supports on node platform
-     */
-    PlatformTools.load = function (name) {
-        // if name is not absolute or relative, then try to load package from the node_modules of the directory we are currently in
-        // this is useful when we are using typeorm package globally installed and it accesses drivers
-        // that are not installed globally
-        try {
-            // switch case to explicit require statements for webpack compatibility.
-            switch (name) {
-                /**
-                * mongodb
-                */
-                case "mongodb":
-                    return require("mongodb");
-                /**
-                * hana
-                */
-                case "@sap/hana-client":
-                    return require("@sap/hana-client");
-                case "hdb-pool":
-                    return require("hdb-pool");
-                /**
-                * mysql
-                */
-                case "mysql":
-                    return require("mysql");
-                case "mysql2":
-                    return require("mysql2");
-                /**
-                * oracle
-                */
-                case "oracledb":
-                    return require("oracledb");
-                /**
-                * postgres
-                */
-                case "pg":
-                    return require("pg");
-                case "pg-native":
-                    return require("pg-native");
-                case "pg-query-stream":
-                    return require("pg-query-stream");
-                case "typeorm-aurora-data-api-driver":
-                    return require("typeorm-aurora-data-api-driver");
-                /**
-                * redis
-                */
-                case "redis":
-                    return require("redis");
-                case "ioredis":
-                    return require("ioredis");
-                /**
-                 * better-sqlite3
-                 */
-                case "better-sqlite3":
-                    return require("better-sqlite3");
-                /**
-                * sqlite
-                */
-                case "sqlite3":
-                    return require("sqlite3");
-                /**
-                * sql.js
-                */
-                case "sql.js":
-                    return require("sql.js");
-                /**
-                * sqlserver
-                */
-                case "mssql":
-                    return require("mssql");
-                /**
-                 * react-native-sqlite
-                 */
-                case "react-native-sqlite-storage":
-                    return require("react-native-sqlite-storage");
-            }
-        }
-        catch (err) {
-            return require(path.resolve(process.cwd() + "/node_modules/" + name));
-        }
-        // If nothing above matched and we get here, the package was not listed within PlatformTools
-        // and is an Invalid Package.  To make it explicit that this is NOT the intended use case for
-        // PlatformTools.load - it's not just a way to replace `require` all willy-nilly - let's throw
-        // an error.
-        throw new TypeError("Invalid Package for PlatformTools.load: " + name);
-    };
-    /**
-     * Normalizes given path. Does "path.normalize".
-     */
-    PlatformTools.pathNormalize = function (pathStr) {
-        return path.normalize(pathStr);
-    };
-    /**
-     * Gets file extension. Does "path.extname".
-     */
-    PlatformTools.pathExtname = function (pathStr) {
-        return path.extname(pathStr);
-    };
-    /**
-     * Resolved given path. Does "path.resolve".
-     */
-    PlatformTools.pathResolve = function (pathStr) {
-        return path.resolve(pathStr);
-    };
-    /**
-     * Synchronously checks if file exist. Does "fs.existsSync".
-     */
-    PlatformTools.fileExist = function (pathStr) {
-        return fs.existsSync(pathStr);
-    };
-    PlatformTools.readFileSync = function (filename) {
-        return fs.readFileSync(filename);
-    };
-    PlatformTools.appendFileSync = function (filename, data) {
-        fs.appendFileSync(filename, data);
-    };
-    PlatformTools.writeFile = function (path, data) {
-        return __awaiter(this, void 0, void 0, function () {
-            return __generator(this, function (_a) {
-                return [2 /*return*/, new Promise(function (ok, fail) {
-                        fs.writeFile(path, data, function (err) {
-                            if (err)
-                                fail(err);
-                            ok();
-                        });
-                    })];
+    // If nothing above matched and we get here, the package was not listed within PlatformTools
+    // and is an Invalid Package.  To make it explicit that this is NOT the intended use case for
+    // PlatformTools.load - it's not just a way to replace `require` all willy-nilly - let's throw
+    // an error.
+    throw new TypeError('Invalid Package for PlatformTools.load: ' + name);
+  };
+  /**
+   * Normalizes given path. Does "path.normalize".
+   */
+  PlatformTools.pathNormalize = function (pathStr) {
+    return path.normalize(pathStr);
+  };
+  /**
+   * Gets file extension. Does "path.extname".
+   */
+  PlatformTools.pathExtname = function (pathStr) {
+    return path.extname(pathStr);
+  };
+  /**
+   * Resolved given path. Does "path.resolve".
+   */
+  PlatformTools.pathResolve = function (pathStr) {
+    return path.resolve(pathStr);
+  };
+  /**
+   * Synchronously checks if file exist. Does "fs.existsSync".
+   */
+  PlatformTools.fileExist = function (pathStr) {
+    return fs.existsSync(pathStr);
+  };
+  PlatformTools.readFileSync = function (filename) {
+    return fs.readFileSync(filename);
+  };
+  PlatformTools.appendFileSync = function (filename, data) {
+    fs.appendFileSync(filename, data);
+  };
+  PlatformTools.writeFile = function (path, data) {
+    return __awaiter(this, void 0, void 0, function () {
+      return __generator(this, function (_a) {
+        return [
+          2 /*return*/,
+          new Promise(function (ok, fail) {
+            fs.writeFile(path, data, function (err) {
+              if (err) fail(err);
+              ok();
             });
-        });
-    };
-    /**
-     * Loads a dotenv file into the environment variables.
-     *
-     * @param path The file to load as a dotenv configuration
-     */
-    PlatformTools.dotenv = function (pathStr) {
-        dotenv.config({ path: pathStr });
-    };
-    /**
-     * Gets environment variable.
-     */
-    PlatformTools.getEnvVariable = function (name) {
-        return process.env[name];
-    };
-    /**
-     * Highlights sql string to be print in the console.
-     */
-    PlatformTools.highlightSql = function (sql) {
-        var theme = {
-            "keyword": chalk.blueBright,
-            "literal": chalk.blueBright,
-            "string": chalk.white,
-            "type": chalk.magentaBright,
-            "built_in": chalk.magentaBright,
-            "comment": chalk.gray,
-        };
-        return highlight(sql, { theme: theme, language: "sql" });
-    };
-    /**
-     * Highlights json string to be print in the console.
-     */
-    PlatformTools.highlightJson = function (json) {
-        return highlight(json, { language: "json" });
-    };
-    /**
-     * Logging functions needed by AdvancedConsoleLogger
-     */
-    PlatformTools.logInfo = function (prefix, info) {
-        console.log(chalk.gray.underline(prefix), info);
-    };
-    PlatformTools.logError = function (prefix, error) {
-        console.log(chalk.underline.red(prefix), error);
-    };
-    PlatformTools.logWarn = function (prefix, warning) {
-        console.log(chalk.underline.yellow(prefix), warning);
-    };
-    PlatformTools.log = function (message) {
-        console.log(chalk.underline(message));
-    };
-    PlatformTools.warn = function (message) {
-        return chalk.yellow(message);
-    };
-    /**
-     * Type of the currently running platform.
-     */
-    PlatformTools.type = "node";
-    return PlatformTools;
-}());
+          }),
+        ];
+      });
+    });
+  };
+  /**
+   * Loads a dotenv file into the environment variables.
+   *
+   * @param path The file to load as a dotenv configuration
+   */
+  PlatformTools.dotenv = function (pathStr) {
+    dotenv.config({ path: pathStr });
+  };
+  /**
+   * Gets environment variable.
+   */
+  PlatformTools.getEnvVariable = function (name) {
+    return process.env[name];
+  };
+  /**
+   * Highlights sql string to be print in the console.
+   */
+  PlatformTools.highlightSql = function (sql) {
+    var theme = {
+      keyword: chalk.blueBright,
+      literal: chalk.blueBright,
+      string: chalk.white,
+      type: chalk.magentaBright,
+      built_in: chalk.magentaBright,
+      comment: chalk.gray,
+    };
+    return highlight(sql, { theme: theme, language: 'sql' });
+  };
+  /**
+   * Highlights json string to be print in the console.
+   */
+  PlatformTools.highlightJson = function (json) {
+    return highlight(json, { language: 'json' });
+  };
+  /**
+   * Logging functions needed by AdvancedConsoleLogger
+   */
+  PlatformTools.logInfo = function (prefix, info) {
+    console.log(chalk.gray.underline(prefix), info);
+  };
+  PlatformTools.logError = function (prefix, error) {
+    console.log(chalk.underline.red(prefix), error);
+  };
+  PlatformTools.logWarn = function (prefix, warning) {
+    console.log(chalk.underline.yellow(prefix), warning);
+  };
+  PlatformTools.log = function (message) {
+    console.log(chalk.underline(message));
+  };
+  PlatformTools.warn = function (message) {
+    return chalk.yellow(message);
+  };
+  /**
+   * Type of the currently running platform.
+   */
+  PlatformTools.type = 'node';
+  return PlatformTools;
+})();
 export { PlatformTools };
 
 //# sourceMappingURL=PlatformTools.js.map
diff --git a/node_modules/typeorm/driver/react-native/ReactNativeDriver.js b/node_modules/typeorm/driver/react-native/ReactNativeDriver.js
index 8795785..6bd4e7e 100644
--- a/node_modules/typeorm/driver/react-native/ReactNativeDriver.js
+++ b/node_modules/typeorm/driver/react-native/ReactNativeDriver.js
@@ -1,92 +1,112 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-var tslib_1 = require("tslib");
-var AbstractSqliteDriver_1 = require("../sqlite-abstract/AbstractSqliteDriver");
-var ReactNativeQueryRunner_1 = require("./ReactNativeQueryRunner");
-var DriverOptionNotSetError_1 = require("../../error/DriverOptionNotSetError");
-var DriverPackageNotInstalledError_1 = require("../../error/DriverPackageNotInstalledError");
+'use strict';
+Object.defineProperty(exports, '__esModule', { value: true });
+var tslib_1 = require('tslib');
+var AbstractSqliteDriver_1 = require('../sqlite-abstract/AbstractSqliteDriver');
+var ReactNativeQueryRunner_1 = require('./ReactNativeQueryRunner');
+var DriverOptionNotSetError_1 = require('../../error/DriverOptionNotSetError');
+var DriverPackageNotInstalledError_1 = require('../../error/DriverPackageNotInstalledError');
 var ReactNativeDriver = /** @class */ (function (_super) {
-    tslib_1.__extends(ReactNativeDriver, _super);
-    // -------------------------------------------------------------------------
-    // Constructor
-    // -------------------------------------------------------------------------
-    function ReactNativeDriver(connection) {
-        var _this = _super.call(this, connection) || this;
-        _this.database = _this.options.database;
-        // validate options to make sure everything is set
-        if (!_this.options.database)
-            throw new DriverOptionNotSetError_1.DriverOptionNotSetError("database");
-        if (!_this.options.location)
-            throw new DriverOptionNotSetError_1.DriverOptionNotSetError("location");
-        // load sqlite package
-        _this.loadDependencies();
-        return _this;
-    }
-    // -------------------------------------------------------------------------
-    // Public Methods
-    // -------------------------------------------------------------------------
-    /**
-     * Closes connection with database.
-     */
-    ReactNativeDriver.prototype.disconnect = function () {
-        return tslib_1.__awaiter(this, void 0, void 0, function () {
-            var _this = this;
-            return tslib_1.__generator(this, function (_a) {
-                return [2 /*return*/, new Promise(function (ok, fail) {
-                        _this.queryRunner = undefined;
-                        _this.databaseConnection.close(ok, fail);
-                    })];
-            });
-        });
-    };
-    /**
-     * Creates a query runner used to execute database queries.
-     */
-    ReactNativeDriver.prototype.createQueryRunner = function (mode) {
-        if (!this.queryRunner)
-            this.queryRunner = new ReactNativeQueryRunner_1.ReactNativeQueryRunner(this);
-        return this.queryRunner;
-    };
-    // -------------------------------------------------------------------------
-    // Protected Methods
-    // -------------------------------------------------------------------------
-    /**
-     * Creates connection with the database.
-     */
-    ReactNativeDriver.prototype.createDatabaseConnection = function () {
-        var _this = this;
-        return new Promise(function (ok, fail) {
-            var options = Object.assign({}, {
-                name: _this.options.database,
-                location: _this.options.location,
-            }, _this.options.extra || {});
-            _this.sqlite.openDatabase(options, function (db) {
-                var databaseConnection = db;
-                // we need to enable foreign keys in sqlite to make sure all foreign key related features
-                // working properly. this also makes onDelete work with sqlite.
-                databaseConnection.executeSql("PRAGMA foreign_keys = ON;", [], function (result) {
-                    ok(databaseConnection);
-                }, function (error) {
-                    fail(error);
-                });
-            }, function (error) {
-                fail(error);
-            });
-        });
-    };
-    /**
-     * If driver dependency is not given explicitly, then try to load it via "require".
-     */
-    ReactNativeDriver.prototype.loadDependencies = function () {
-        try {
-            this.sqlite = require("react-native-sqlite-storage");
-        }
-        catch (e) {
-            throw new DriverPackageNotInstalledError_1.DriverPackageNotInstalledError("React-Native", "react-native-sqlite-storage");
+  tslib_1.__extends(ReactNativeDriver, _super);
+  // -------------------------------------------------------------------------
+  // Constructor
+  // -------------------------------------------------------------------------
+  function ReactNativeDriver(connection) {
+    var _this = _super.call(this, connection) || this;
+    _this.database = _this.options.database;
+    // validate options to make sure everything is set
+    if (!_this.options.database)
+      throw new DriverOptionNotSetError_1.DriverOptionNotSetError('database');
+    if (!_this.options.location)
+      throw new DriverOptionNotSetError_1.DriverOptionNotSetError('location');
+    // load sqlite package
+    _this.loadDependencies();
+    return _this;
+  }
+  // -------------------------------------------------------------------------
+  // Public Methods
+  // -------------------------------------------------------------------------
+  /**
+   * Closes connection with database.
+   */
+  ReactNativeDriver.prototype.disconnect = function () {
+    return tslib_1.__awaiter(this, void 0, void 0, function () {
+      var _this = this;
+      return tslib_1.__generator(this, function (_a) {
+        return [
+          2 /*return*/,
+          new Promise(function (ok, fail) {
+            _this.queryRunner = undefined;
+            _this.databaseConnection.close(ok, fail);
+          }),
+        ];
+      });
+    });
+  };
+  /**
+   * Creates a query runner used to execute database queries.
+   */
+  ReactNativeDriver.prototype.createQueryRunner = function (mode) {
+    if (!this.queryRunner)
+      this.queryRunner = new ReactNativeQueryRunner_1.ReactNativeQueryRunner(
+        this
+      );
+    return this.queryRunner;
+  };
+  // -------------------------------------------------------------------------
+  // Protected Methods
+  // -------------------------------------------------------------------------
+  /**
+   * Creates connection with the database.
+   */
+  ReactNativeDriver.prototype.createDatabaseConnection = function () {
+    var _this = this;
+    return new Promise(function (ok, fail) {
+      var options = Object.assign(
+        {},
+        {
+          name: _this.options.database,
+          location: _this.options.location,
+        },
+        _this.options.extra || {}
+      );
+      _this.sqlite.openDatabase(
+        options,
+        function (db) {
+          var databaseConnection = db;
+          // we need to enable foreign keys in sqlite to make sure all foreign key related features
+          // working properly. this also makes onDelete work with sqlite.
+          databaseConnection.executeSql(
+            'PRAGMA foreign_keys = ON;',
+            [],
+            function (result) {
+              ok(databaseConnection);
+            },
+            function (error) {
+              fail(error);
+            }
+          );
+        },
+        function (error) {
+          fail(error);
         }
-    };
-    return ReactNativeDriver;
-}(AbstractSqliteDriver_1.AbstractSqliteDriver));
+      );
+    });
+  };
+  /**
+   * If driver dependency is not given explicitly, then try to load it via "require".
+   */
+  ReactNativeDriver.prototype.loadDependencies = function () {
+    try {
+      this.sqlite = require('react-native-quick-sqlite');
+    } catch (e) {
+      throw new DriverPackageNotInstalledError_1.DriverPackageNotInstalledError(
+        'React-Native',
+        'react-native-quick-sqlite'
+      );
+    }
+  };
+  return ReactNativeDriver;
+})(AbstractSqliteDriver_1.AbstractSqliteDriver);
 exports.ReactNativeDriver = ReactNativeDriver;
 
 //# sourceMappingURL=ReactNativeDriver.js.map
diff --git a/node_modules/typeorm/platform/PlatformTools.js b/node_modules/typeorm/platform/PlatformTools.js
index 029d231..e3edba5 100644
--- a/node_modules/typeorm/platform/PlatformTools.js
+++ b/node_modules/typeorm/platform/PlatformTools.js
@@ -1,220 +1,220 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-var tslib_1 = require("tslib");
-var path = tslib_1.__importStar(require("path"));
-var fs = tslib_1.__importStar(require("fs"));
-var dotenv_1 = tslib_1.__importDefault(require("dotenv"));
-var chalk_1 = tslib_1.__importDefault(require("chalk"));
-var cli_highlight_1 = require("cli-highlight");
-var fs_1 = require("fs");
+'use strict';
+Object.defineProperty(exports, '__esModule', { value: true });
+var tslib_1 = require('tslib');
+var path = tslib_1.__importStar(require('path'));
+var fs = tslib_1.__importStar(require('fs'));
+var dotenv_1 = tslib_1.__importDefault(require('dotenv'));
+var chalk_1 = tslib_1.__importDefault(require('chalk'));
+var cli_highlight_1 = require('cli-highlight');
+var fs_1 = require('fs');
 exports.ReadStream = fs_1.ReadStream;
-var events_1 = require("events");
+var events_1 = require('events');
 exports.EventEmitter = events_1.EventEmitter;
-var stream_1 = require("stream");
+var stream_1 = require('stream');
 exports.Readable = stream_1.Readable;
 exports.Writable = stream_1.Writable;
 /**
  * Platform-specific tools.
  */
 var PlatformTools = /** @class */ (function () {
-    function PlatformTools() {
+  function PlatformTools() {}
+  /**
+   * Gets global variable where global stuff can be stored.
+   */
+  PlatformTools.getGlobalVariable = function () {
+    return global;
+  };
+  /**
+   * Loads ("require"-s) given file or package.
+   * This operation only supports on node platform
+   */
+  PlatformTools.load = function (name) {
+    // if name is not absolute or relative, then try to load package from the node_modules of the directory we are currently in
+    // this is useful when we are using typeorm package globally installed and it accesses drivers
+    // that are not installed globally
+    try {
+      // switch case to explicit require statements for webpack compatibility.
+      switch (name) {
+        /**
+         * mongodb
+         */
+        case 'mongodb':
+          return require('mongodb');
+        /**
+         * hana
+         */
+        case '@sap/hana-client':
+          return require('@sap/hana-client');
+        case 'hdb-pool':
+          return require('hdb-pool');
+        /**
+         * mysql
+         */
+        case 'mysql':
+          return require('mysql');
+        case 'mysql2':
+          return require('mysql2');
+        /**
+         * oracle
+         */
+        case 'oracledb':
+          return require('oracledb');
+        /**
+         * postgres
+         */
+        case 'pg':
+          return require('pg');
+        case 'pg-native':
+          return require('pg-native');
+        case 'pg-query-stream':
+          return require('pg-query-stream');
+        case 'typeorm-aurora-data-api-driver':
+          return require('typeorm-aurora-data-api-driver');
+        /**
+         * redis
+         */
+        case 'redis':
+          return require('redis');
+        case 'ioredis':
+          return require('ioredis');
+        /**
+         * better-sqlite3
+         */
+        case 'better-sqlite3':
+          return require('better-sqlite3');
+        /**
+         * sqlite
+         */
+        case 'sqlite3':
+          return require('sqlite3');
+        /**
+         * sql.js
+         */
+        case 'sql.js':
+          return require('sql.js');
+        /**
+         * sqlserver
+         */
+        case 'mssql':
+          return require('mssql');
+        /**
+         * react-native-sqlite
+         */
+        case 'react-native-quick-sqlite':
+          return require('react-native-quick-sqlite');
+      }
+    } catch (err) {
+      return require(path.resolve(process.cwd() + '/node_modules/' + name));
     }
-    /**
-     * Gets global variable where global stuff can be stored.
-     */
-    PlatformTools.getGlobalVariable = function () {
-        return global;
-    };
-    /**
-     * Loads ("require"-s) given file or package.
-     * This operation only supports on node platform
-     */
-    PlatformTools.load = function (name) {
-        // if name is not absolute or relative, then try to load package from the node_modules of the directory we are currently in
-        // this is useful when we are using typeorm package globally installed and it accesses drivers
-        // that are not installed globally
-        try {
-            // switch case to explicit require statements for webpack compatibility.
-            switch (name) {
-                /**
-                * mongodb
-                */
-                case "mongodb":
-                    return require("mongodb");
-                /**
-                * hana
-                */
-                case "@sap/hana-client":
-                    return require("@sap/hana-client");
-                case "hdb-pool":
-                    return require("hdb-pool");
-                /**
-                * mysql
-                */
-                case "mysql":
-                    return require("mysql");
-                case "mysql2":
-                    return require("mysql2");
-                /**
-                * oracle
-                */
-                case "oracledb":
-                    return require("oracledb");
-                /**
-                * postgres
-                */
-                case "pg":
-                    return require("pg");
-                case "pg-native":
-                    return require("pg-native");
-                case "pg-query-stream":
-                    return require("pg-query-stream");
-                case "typeorm-aurora-data-api-driver":
-                    return require("typeorm-aurora-data-api-driver");
-                /**
-                * redis
-                */
-                case "redis":
-                    return require("redis");
-                case "ioredis":
-                    return require("ioredis");
-                /**
-                 * better-sqlite3
-                 */
-                case "better-sqlite3":
-                    return require("better-sqlite3");
-                /**
-                * sqlite
-                */
-                case "sqlite3":
-                    return require("sqlite3");
-                /**
-                * sql.js
-                */
-                case "sql.js":
-                    return require("sql.js");
-                /**
-                * sqlserver
-                */
-                case "mssql":
-                    return require("mssql");
-                /**
-                 * react-native-sqlite
-                 */
-                case "react-native-sqlite-storage":
-                    return require("react-native-sqlite-storage");
-            }
-        }
-        catch (err) {
-            return require(path.resolve(process.cwd() + "/node_modules/" + name));
-        }
-        // If nothing above matched and we get here, the package was not listed within PlatformTools
-        // and is an Invalid Package.  To make it explicit that this is NOT the intended use case for
-        // PlatformTools.load - it's not just a way to replace `require` all willy-nilly - let's throw
-        // an error.
-        throw new TypeError("Invalid Package for PlatformTools.load: " + name);
-    };
-    /**
-     * Normalizes given path. Does "path.normalize".
-     */
-    PlatformTools.pathNormalize = function (pathStr) {
-        return path.normalize(pathStr);
-    };
-    /**
-     * Gets file extension. Does "path.extname".
-     */
-    PlatformTools.pathExtname = function (pathStr) {
-        return path.extname(pathStr);
-    };
-    /**
-     * Resolved given path. Does "path.resolve".
-     */
-    PlatformTools.pathResolve = function (pathStr) {
-        return path.resolve(pathStr);
-    };
-    /**
-     * Synchronously checks if file exist. Does "fs.existsSync".
-     */
-    PlatformTools.fileExist = function (pathStr) {
-        return fs.existsSync(pathStr);
-    };
-    PlatformTools.readFileSync = function (filename) {
-        return fs.readFileSync(filename);
-    };
-    PlatformTools.appendFileSync = function (filename, data) {
-        fs.appendFileSync(filename, data);
-    };
-    PlatformTools.writeFile = function (path, data) {
-        return tslib_1.__awaiter(this, void 0, void 0, function () {
-            return tslib_1.__generator(this, function (_a) {
-                return [2 /*return*/, new Promise(function (ok, fail) {
-                        fs.writeFile(path, data, function (err) {
-                            if (err)
-                                fail(err);
-                            ok();
-                        });
-                    })];
+    // If nothing above matched and we get here, the package was not listed within PlatformTools
+    // and is an Invalid Package.  To make it explicit that this is NOT the intended use case for
+    // PlatformTools.load - it's not just a way to replace `require` all willy-nilly - let's throw
+    // an error.
+    throw new TypeError('Invalid Package for PlatformTools.load: ' + name);
+  };
+  /**
+   * Normalizes given path. Does "path.normalize".
+   */
+  PlatformTools.pathNormalize = function (pathStr) {
+    return path.normalize(pathStr);
+  };
+  /**
+   * Gets file extension. Does "path.extname".
+   */
+  PlatformTools.pathExtname = function (pathStr) {
+    return path.extname(pathStr);
+  };
+  /**
+   * Resolved given path. Does "path.resolve".
+   */
+  PlatformTools.pathResolve = function (pathStr) {
+    return path.resolve(pathStr);
+  };
+  /**
+   * Synchronously checks if file exist. Does "fs.existsSync".
+   */
+  PlatformTools.fileExist = function (pathStr) {
+    return fs.existsSync(pathStr);
+  };
+  PlatformTools.readFileSync = function (filename) {
+    return fs.readFileSync(filename);
+  };
+  PlatformTools.appendFileSync = function (filename, data) {
+    fs.appendFileSync(filename, data);
+  };
+  PlatformTools.writeFile = function (path, data) {
+    return tslib_1.__awaiter(this, void 0, void 0, function () {
+      return tslib_1.__generator(this, function (_a) {
+        return [
+          2 /*return*/,
+          new Promise(function (ok, fail) {
+            fs.writeFile(path, data, function (err) {
+              if (err) fail(err);
+              ok();
             });
-        });
-    };
-    /**
-     * Loads a dotenv file into the environment variables.
-     *
-     * @param path The file to load as a dotenv configuration
-     */
-    PlatformTools.dotenv = function (pathStr) {
-        dotenv_1.default.config({ path: pathStr });
-    };
-    /**
-     * Gets environment variable.
-     */
-    PlatformTools.getEnvVariable = function (name) {
-        return process.env[name];
-    };
-    /**
-     * Highlights sql string to be print in the console.
-     */
-    PlatformTools.highlightSql = function (sql) {
-        var theme = {
-            "keyword": chalk_1.default.blueBright,
-            "literal": chalk_1.default.blueBright,
-            "string": chalk_1.default.white,
-            "type": chalk_1.default.magentaBright,
-            "built_in": chalk_1.default.magentaBright,
-            "comment": chalk_1.default.gray,
-        };
-        return cli_highlight_1.highlight(sql, { theme: theme, language: "sql" });
-    };
-    /**
-     * Highlights json string to be print in the console.
-     */
-    PlatformTools.highlightJson = function (json) {
-        return cli_highlight_1.highlight(json, { language: "json" });
-    };
-    /**
-     * Logging functions needed by AdvancedConsoleLogger
-     */
-    PlatformTools.logInfo = function (prefix, info) {
-        console.log(chalk_1.default.gray.underline(prefix), info);
-    };
-    PlatformTools.logError = function (prefix, error) {
-        console.log(chalk_1.default.underline.red(prefix), error);
-    };
-    PlatformTools.logWarn = function (prefix, warning) {
-        console.log(chalk_1.default.underline.yellow(prefix), warning);
-    };
-    PlatformTools.log = function (message) {
-        console.log(chalk_1.default.underline(message));
-    };
-    PlatformTools.warn = function (message) {
-        return chalk_1.default.yellow(message);
-    };
-    /**
-     * Type of the currently running platform.
-     */
-    PlatformTools.type = "node";
-    return PlatformTools;
-}());
+          }),
+        ];
+      });
+    });
+  };
+  /**
+   * Loads a dotenv file into the environment variables.
+   *
+   * @param path The file to load as a dotenv configuration
+   */
+  PlatformTools.dotenv = function (pathStr) {
+    dotenv_1.default.config({ path: pathStr });
+  };
+  /**
+   * Gets environment variable.
+   */
+  PlatformTools.getEnvVariable = function (name) {
+    return process.env[name];
+  };
+  /**
+   * Highlights sql string to be print in the console.
+   */
+  PlatformTools.highlightSql = function (sql) {
+    var theme = {
+      keyword: chalk_1.default.blueBright,
+      literal: chalk_1.default.blueBright,
+      string: chalk_1.default.white,
+      type: chalk_1.default.magentaBright,
+      built_in: chalk_1.default.magentaBright,
+      comment: chalk_1.default.gray,
+    };
+    return cli_highlight_1.highlight(sql, { theme: theme, language: 'sql' });
+  };
+  /**
+   * Highlights json string to be print in the console.
+   */
+  PlatformTools.highlightJson = function (json) {
+    return cli_highlight_1.highlight(json, { language: 'json' });
+  };
+  /**
+   * Logging functions needed by AdvancedConsoleLogger
+   */
+  PlatformTools.logInfo = function (prefix, info) {
+    console.log(chalk_1.default.gray.underline(prefix), info);
+  };
+  PlatformTools.logError = function (prefix, error) {
+    console.log(chalk_1.default.underline.red(prefix), error);
+  };
+  PlatformTools.logWarn = function (prefix, warning) {
+    console.log(chalk_1.default.underline.yellow(prefix), warning);
+  };
+  PlatformTools.log = function (message) {
+    console.log(chalk_1.default.underline(message));
+  };
+  PlatformTools.warn = function (message) {
+    return chalk_1.default.yellow(message);
+  };
+  /**
+   * Type of the currently running platform.
+   */
+  PlatformTools.type = 'node';
+  return PlatformTools;
+})();
 exports.PlatformTools = PlatformTools;
 
 //# sourceMappingURL=PlatformTools.js.map
